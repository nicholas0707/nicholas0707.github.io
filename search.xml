<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nginx之旅(第二篇):nginx日志管理、nginx防盗链、nginx虚拟主机</title>
    <url>/posts/20191217a2.html</url>
    <content><![CDATA[<h2 id="一、nginx日志管理"><a href="#一、nginx日志管理" class="headerlink" title="一、nginx日志管理"></a>一、nginx日志管理</h2><p>Nginx访问日志主要有两个参数控制</p>
<p>1) log_format #用来定义记录日志的格式（可以定义多种日志格式，取不不同名字即可）<br>log_format log_name string<br>2) access_log #用来指定日至文件的路路径及使用的何种日志格式记录日志<br>access_log logs/access.log main;</p>
<h3 id="log-format格式变量含义："><a href="#log-format格式变量含义：" class="headerlink" title="log_format格式变量含义："></a>log_format格式变量含义：</h3><table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">remote_addr</td>
<td align="left">客户端地址</td>
</tr>
<tr>
<td align="left">remote_user</td>
<td align="left">客户端用户名</td>
</tr>
<tr>
<td align="left">time_local</td>
<td align="left">服务器时间</td>
</tr>
<tr>
<td align="left">request</td>
<td align="left">请求内容，包括方法名、地址和http协议</td>
</tr>
<tr>
<td align="left">http_host</td>
<td align="left">用户请求时使用的http地址</td>
</tr>
<tr>
<td align="left">status</td>
<td align="left">返回的http状态码</td>
</tr>
<tr>
<td align="left">request_length</td>
<td align="left">请求大小</td>
</tr>
<tr>
<td align="left">body_bytes_sent</td>
<td align="left">返回的大小</td>
</tr>
<tr>
<td align="left">http_referer</td>
<td align="left">来源页</td>
</tr>
<tr>
<td align="left">http_user_agent</td>
<td align="left">客户端名称</td>
</tr>
<tr>
<td align="left">request_time</td>
<td align="left">整体请求延时</td>
</tr>
<tr>
<td align="left">upstream_response_time</td>
<td align="left">上游服务的处理延时</td>
</tr>
</tbody></table>
<p>$remote_addr #记录访问网站的客户端地址<br>$remote_user #远程客户端用户名<br>$time_local #记录访问时间与时区<br>$request #用户的http请求起始行行信息<br>$status #http状态码，记录请求返回的状态码，例例如：200、301、404等<br>$body_bytes_sent #服务器器发送给客户端的响应body字节数<br>$http_referer #记录此次请求是从哪个连接访问过来的，可以根据该参数进行行防盗链设置。<br>$http_user_agent #记录客户端访问信息，例例如：浏览器器、手机客户端等<br>$http_x_forwarded_for #当前端有代理理服务器器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理理服务器器也要进行行相关的x_forwarded_for设置</p>
<h3 id="自定义设置日志"><a href="#自定义设置日志" class="headerlink" title="自定义设置日志"></a>自定义设置日志</h3><p>在配置文件里设置格式，应用格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# vi ..&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    </span><br><span class="line">    #自定义日志第一步自己设置日志的格式</span><br><span class="line">	log_format  mylogs &#39;[$time_local]--$remote_addr -&quot;$request&quot;-$status&#39;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">		listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">        #自定义日志第二步，应用日志格式</span><br><span class="line">        access_log  logs&#x2F;host.access.log  mylogs;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;；</span><br><span class="line">        #location &#x2F; 这里的&#x2F;代表网站的根目录</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用tailf 在/usr/local/nginx/logs/host.access.log跟踪日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;</span><br><span class="line">[root@localhost logs]# ls</span><br><span class="line">access.log  error.log  host.access.log  nginx.pid</span><br><span class="line">[root@localhost logs]# tailf host.access.log</span><br><span class="line">[14&#x2F;Dec&#x2F;2019:20:09:39 +0800]--192.168.199.168 -&quot;GET &#x2F;b&#x2F; HTTP&#x2F;1.1&quot;-304</span><br></pre></td></tr></table></figure>



<p>用例二，自定义json格式的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# vi ..&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    </span><br><span class="line">    #自定义日志第一步自己设置日志的格式</span><br><span class="line">	log_format main_json &#39;&#123;&quot;@timestamp&quot;:&quot;$time_local&quot;,&#39;</span><br><span class="line">    &#39;&quot;client_ip&quot;: &quot;$remote_addr&quot;,&#39;</span><br><span class="line">    &#39;&quot;request&quot;: &quot;$request&quot;,&#39;</span><br><span class="line">    &#39;&quot;status&quot;: &quot;$status&quot;,&#39;</span><br><span class="line">    &#39;&quot;bytes&quot;: &quot;$body_bytes_sent&quot;,&#39;</span><br><span class="line">    &#39;&quot;x_forwarded&quot;: &quot;$http_x_forwarded_for&quot;,&#39;</span><br><span class="line">    &#39;&quot;referer&quot;: &quot;$http_referer&quot;,&#39;</span><br><span class="line">    &#39;&#125;&#39;;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">		listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">        #自定义日志第二步，应用日志格式</span><br><span class="line">        access_log logs&#x2F;access_json.log main_json;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;；</span><br><span class="line">        #location &#x2F; 这里的&#x2F;代表网站的根目录</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、防盗链"><a href="#二、防盗链" class="headerlink" title="二、防盗链"></a>二、防盗链</h2><p>创建环境</p>
<p>VM –web02的ip地址是192.168.199.229</p>
<p>安装nginx，创建spider,将index.html写入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# cd html&#x2F;</span><br><span class="line">[root@localhost html]# ls</span><br><span class="line">50x.html  index.html</span><br><span class="line">[root@localhost html]# mkdir spider</span><br><span class="line"></span><br><span class="line">[root@localhost html]# vi spider&#x2F;index.html </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;fang dao lian ce shi&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;font size&#x3D;&quot;5&quot;&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;192.168.199.228&#x2F;c&#x2F;0.png&quot;&gt;dao lian&lt;&#x2F;a&gt;</span><br><span class="line">&lt;br&gt;&lt;&#x2F;br&gt;</span><br><span class="line">&lt;&#x2F;font&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">~                                                                             </span><br><span class="line">~                                                                             </span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<p>VM-web01的ip是192.168.199.228</p>
<p>将0.png放入/usr/local/nginx/html/c</p>
<p>效果</p>
<img src="/posts/20191217a2/%E7%9B%97%E9%93%BE1.gif" class="" title="盗链">



<p>在VM-web01设置防盗链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# vi ..&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">		listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;；</span><br><span class="line">        #location &#x2F; 这里的&#x2F;代表网站的根目录</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">		#针对c文件夹进行设置进行防盗链;</span><br><span class="line">        location &#x2F;c &#123;</span><br><span class="line">                valid_referers none blocked *.test.com;</span><br><span class="line">                if ($invalid_referer) &#123;</span><br><span class="line">                        return 403;</span><br><span class="line">                        &#125;</span><br><span class="line">                 &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>valid_referers none blocked *.test.com; </p>
<p>表示要么没有Referrer要么Referrer:blocked(走的是硬件防火墙)要么Referrer: 属于*.test.com这个域名</p>
<p>针对全站设置图片防盗链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~* \.(png|gif|bmp)$ &#123;</span><br><span class="line">	valid_referers none blocked *.test.com; </span><br><span class="line">	if ($invalid_referer) &#123;</span><br><span class="line">		return 403;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		 &#125;</span><br></pre></td></tr></table></figure>

<p>效果</p>
<img src="/posts/20191217a2/%E9%98%B2%E7%9B%97%E9%93%BE.gif" class="" title="防盗链">



<h2 id="三、虚拟主机"><a href="#三、虚拟主机" class="headerlink" title="三、虚拟主机"></a>三、虚拟主机</h2><h3 id="虚拟主机的概念"><a href="#虚拟主机的概念" class="headerlink" title="虚拟主机的概念"></a><strong>虚拟主机的概念</strong></h3><p>如果你有两个不同域名的网站，但是你只有一台服务器，这时候怎么办？其实利用nginx或者apache都可以帮你用一台机器来模拟多台机器作为服务器提供服务。</p>
<p>一个web服务器器软件默认情况下只能发布一个web,因为一个web分享出去需要三个条件(IP、Port、Domain name)。</p>
<p>虚拟主机，就是把一台物理服务器划分成多个“虚拟”的服务器，每一个虚拟主机都可以有独立的域名和独立的目录</p>
<p>，在web服务里就是一个独立的网站站点，这个站点对应独立的域名（也可能是IP或端口），具有独立的程序及资源目录，可以独立地对外提供服务供用户访问。</p>
<p>​    这个这个独立的站点在配置里是由一定格式的标签段标记，对于apache软件来说，一个虚拟主机的标签段通畅被包含在<VirtualHost></VirtualHost>内，而nginx软件则使用一个server{}标签来标示一个虚拟主机，一个web服务里可以有多个虚拟主机主机标签对，即同时可以支持多个虚拟主机站点。</p>
<p>通过 Nginx 可以实现虚拟主机的配置，Nginx 支持三种类型的虚拟主机配置</p>
<ul>
<li>基于 IP 的虚拟主机</li>
<li>基于端口的虚拟主机</li>
<li>基于域名的虚拟主机</li>
</ul>
<h3 id="Nginx-配置文件的结构"><a href="#Nginx-配置文件的结构" class="headerlink" title="Nginx 配置文件的结构"></a>Nginx 配置文件的结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：每个 server 就是一个虚拟主机</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1、基于IP的虚拟主机"><a href="#1、基于IP的虚拟主机" class="headerlink" title="1、基于IP的虚拟主机"></a>1、基于IP的虚拟主机</h3><p>基于IP的虚拟主机，意思就是通过不同的IP区分不同的虚拟主机，</p>
<p>Linux 操作系统允许添加 IP 别名，IP 别名就是在一块物理网卡上绑定多个 lP 地址。这样就能够在使用单一网卡的同一个服务器上运行多个基于 IP 的虚拟主机。</p>
<p><strong>需求</strong></p>
<p>本机原有ip192.168.199.228</p>
<ul>
<li>一台 Nginx 服务器绑定两个 IP：192.168.199.228、192.168.199.128</li>
<li>访问不同的 IP 请求不同的 HTML 目录，即： <ul>
<li>访问 <code>http://192.168.199.228</code> 将访问 <code>a</code> 目录下的 html 网页</li>
<li>访问 <code>http://192.168.199.128</code> 将访问 <code>b</code> 目录下的 html 网页</li>
</ul>
</li>
</ul>
<p><strong>增加辅助ip的方法</strong></p>
<p>1.1 临时性增加辅助ip：</p>
<p>方法一：ifconfig ens33:1 192.168.199.128/24 up</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.228  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        inet6 fe80::3f62:e00a:ee97:b24d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::2ab:8d0e:862a:fdf0  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::8d2:921f:c09f:8c97  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:7b:9b:18  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 57932  bytes 8672597 (8.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 18482  bytes 1963395 (1.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 232  bytes 27329 (26.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 232  bytes 27329 (26.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ifconfig ens33:1 192.168.199.128&#x2F;24 up  #创建子ip128</span><br><span class="line">[root@localhost ~]# ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.228  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        inet6 fe80::3f62:e00a:ee97:b24d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::2ab:8d0e:862a:fdf0  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::8d2:921f:c09f:8c97  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:7b:9b:18  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 58773  bytes 8728263 (8.3 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 18554  bytes 1971175 (1.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33:1: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.128  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        ether 00:0c:29:7b:9b:18  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 232  bytes 27329 (26.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 232  bytes 27329 (26.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>



<p>方法二：ip addr</p>
<p>ip addr add 192.168.199.130/24 dev ens33（使用ip addr能查看）</p>
<p>ip addr add 192.168.199.130/24 label ens33:2 dev ens33（使用ifconfig和ipaddr都能查看，推荐使用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr add 192.168.199.130&#x2F;24 label ens33:2 dev ens33</span><br><span class="line">[root@localhost ~]# ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.229  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        inet6 fe80::6fd6:65fd:b960:af14  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::5a0a:f713:1cae:b91b  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::292a:bee0:12:74fa  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:08:ee:cd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 10777  bytes 1765191 (1.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2835  bytes 267788 (261.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33:2: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.130  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 00:0c:29:08:ee:cd  txqueuelen 1000  (Ethernet)</span><br><span class="line"></span><br><span class="line">lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 4  bytes 352 (352.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 4  bytes 352 (352.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>

<p>1.2永久增加辅助ip</p>
<p>cd /etc/sysconfig/network-scripts/    #进入到网卡配置文件的目录</p>
<p>cp ifcfg-ens33 ifcfg-ens33:1                #拷贝配置文件并重命名</p>
<p>vi ifcfg-ens33:1                        #编辑配置文件</p>
<p>/etc/init.d/network restart            #重启网络服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]# vi ifcfg-ens33:1</span><br><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD&#x3D;&quot;none&quot;</span><br><span class="line">BROWSER_ONLY&#x3D;&quot;no&quot;</span><br><span class="line">BOOTPROTO&#x3D;&quot;dhcp&quot;</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;</span><br><span class="line">NAME&#x3D;&quot;ens33:1&quot; #修改</span><br><span class="line">UUID&#x3D;&quot;42820e51-d7c9-49e3-a0ec-7f1b09f797c5&quot;</span><br><span class="line">DEVICE&#x3D;&quot;ens33：1&quot; #修改</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line">IPADDR&#x3D;&quot;192.168.199.128&quot;  #增加</span><br><span class="line">NETMASK&#x3D;&quot;255.255.255.0&quot; #增加</span><br><span class="line"></span><br><span class="line">[root@localhost network-scripts]# &#x2F;etc&#x2F;init.d&#x2F;network restart </span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br><span class="line">[root@localhost network-scripts]# ifconfig</span><br><span class="line">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.228  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        inet6 fe80::3f62:e00a:ee97:b24d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::2ab:8d0e:862a:fdf0  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        inet6 fe80::8d2:921f:c09f:8c97  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:7b:9b:18  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 61195  bytes 9081544 (8.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 19449  bytes 2067061 (1.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33:1: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.199.128  netmask 255.255.255.0  broadcast 192.168.199.255</span><br><span class="line">        ether 00:0c:29:7b:9b:18  txqueuelen 1000  (Ethernet)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<p><strong>创建目录及文件</strong></p>
<p>在 <code>/usr/local/nginx/html</code> 目录下创建 a 和 b两个目录，并分辨创建两个 index.html 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# mkdir a b </span><br><span class="line">[root@localhost html]# ls</span><br><span class="line">50x.html  a  b  c  index.html</span><br><span class="line">[root@localhost html]# echo aaa &gt;a&#x2F;index.html</span><br><span class="line">[root@localhost html]# echo bbb &gt;b&#x2F;index.html</span><br></pre></td></tr></table></figure>

<p><strong>配置虚拟主机</strong></p>
<p>修改 <code>/usr/local/nginx</code> 目录下的 nginx.conf 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    # 配置虚拟主机 192.168.199.228</span><br><span class="line">    server &#123;</span><br><span class="line">    # 监听的ip和端口，配置 192.168.199.228:80</span><br><span class="line">        listen       192.168.199.228:80;</span><br><span class="line">    # 所有的请求都以&#x2F;开始，所有的请求都可以匹配此 location</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        # 使用 root 指令指定虚拟主机目录即网页存放目录</span><br><span class="line">        # 比如访问 http:&#x2F;&#x2F;ip&#x2F;index.html 将找到&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;a&#x2F;index.html</span><br><span class="line">        # 比如访问 http:&#x2F;&#x2F;ip&#x2F;item&#x2F;index.html 将找到 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;a&#x2F;item&#x2F;index.html</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;a;</span><br><span class="line">        # 指定欢迎页面，按从左到右顺序查找</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    # 配置虚拟主机 192.168.199.128</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      192.168.199.128:80;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;b;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# killall nginx</span><br><span class="line">[root@localhost html]# lsof -i :80</span><br><span class="line">[root@localhost html]# ..&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure>



<h3 id="2、基于端口的虚拟主机配置"><a href="#2、基于端口的虚拟主机配置" class="headerlink" title="2、基于端口的虚拟主机配置"></a>2、基于端口的虚拟主机配置</h3><p><strong>需求</strong></p>
<ul>
<li>Nginx 对外提供 80 和 8080 两个端口监听服务</li>
<li>请求 80 端口则请求 html80 目录下的 html</li>
<li>请求 8080 端口则请求 html8080 目录下的 html</li>
</ul>
<p><strong>创建目录及文件</strong></p>
<p>在 <code>/usr/local/nginx/html</code> 目录下创建 <code>html80</code> 和 <code>html8080</code> 两个目录，并分辨创建两个 index.html 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">[root@localhost nginx]# mkdir html80 html8080</span><br><span class="line">[root@localhost nginx]# echo 80html网页 &gt;html80&#x2F;index.html</span><br><span class="line">[root@localhost nginx]# echo 8080html网页 &gt;html8080&#x2F;index.html</span><br><span class="line">[root@localhost nginx]# cat html80&#x2F;index.html </span><br><span class="line">80html网页</span><br></pre></td></tr></table></figure>

<p><strong>配置虚拟主机</strong></p>
<p>修改 <code>/usr/local/nginx</code> 目录下的 nginx.conf 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    # 配置虚拟主机 192.168.199.228</span><br><span class="line">    server &#123;</span><br><span class="line">        listen     80;</span><br><span class="line">    # 所有的请求都以&#x2F;开始，所有的请求都可以匹配此 location</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html80;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      8080;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html8080&#x2F;;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、基于域名的虚拟主机配置"><a href="#3、基于域名的虚拟主机配置" class="headerlink" title="3、基于域名的虚拟主机配置"></a>3、基于域名的虚拟主机配置</h3><p><strong>需求</strong></p>
<ul>
<li>两个域名指向同一台 Nginx 服务器，用户访问不同的域名显示不同的网页内容</li>
<li>两个域名是 admin.abc.com 和 service.abc.com</li>
<li>Nginx 服务器使用虚拟机 192.168.199.228</li>
</ul>
<p><strong>配置Hosts 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# vi &#x2F;etc&#x2F;hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.199.228 admin.abc.com</span><br><span class="line">192.168.199.228 service.abc.com</span><br></pre></td></tr></table></figure>

<p><strong>创建目录及文件</strong></p>
<p>在 <code>/usr/local/nginx/html</code> 目录下创建 <code>htmladmin</code> 和 <code>htmlservice</code> 两个目录，并分辨创建两个 index.html 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# mkdir htmladmin htmlservice</span><br><span class="line">[root@localhost nginx]# echo htmladmin &gt;htmladmin&#x2F;index.html</span><br><span class="line">[root@localhost nginx]# echo htmlservice &gt;htmlservice&#x2F;index.html</span><br><span class="line">[root@localhost nginx]# cat htmladmin&#x2F;index.html </span><br><span class="line">htmladmin</span><br><span class="line">[root@localhost nginx]# cat htmlservice&#x2F;index.html </span><br><span class="line">htmlservice</span><br><span class="line">[root@localhost nginx]#</span><br></pre></td></tr></table></figure>

<p><strong>配置虚拟主机</strong></p>
<p>修改 <code>/usr/local/nginx</code> 目录下的 nginx.conf 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    # 配置虚拟主机 192.168.199.228</span><br><span class="line">    server &#123;</span><br><span class="line">        listen     80;</span><br><span class="line">        server_name admin.abc.com;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;htmladmin;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      80;</span><br><span class="line">        server_name service.abc.com;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;htmlservice&#x2F;;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# sbin&#x2F;nginx -t</span><br><span class="line">nginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful</span><br><span class="line">[root@localhost nginx]# killall nginx</span><br><span class="line">[root@localhost nginx]# sbin&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p>效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# elinks http:&#x2F;&#x2F;admin.abc.com --dump</span><br><span class="line">   htmladmin</span><br><span class="line">[root@localhost nginx]# elinks http:&#x2F;&#x2F;service.abc.com --dump</span><br><span class="line">   htmlservice</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx之旅第一篇：nginx下载安装、nginx配置文件详解、nginx默认网站</title>
    <url>/posts/20191216a1.html</url>
    <content><![CDATA[<h2 id="一、nginx下载安装"><a href="#一、nginx下载安装" class="headerlink" title="一、nginx下载安装"></a>一、nginx下载安装</h2><p>版本nginx 1.15.5</p>
<p>系统环境centos7.5（本机ip192.168.199.228）</p>
<p>关闭selinux 和防火墙firewall</p>
<h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>wget <a href="http://nginx.org/download/nginx-1.15.5.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.5.tar.gz</a> -P /usr/src</p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>安装大概过程</p>
<p>配置—编译—安装</p>
<p>配置<br>1）检查环境 是否 满足安装条件 依赖解决<br>2）指定安装方式 配置文件 命令文件 各种文件放哪里 开启模块功能【内<br>置模块 三方模块】<br>3）指定软件安装在那里</p>
<p>a、切换到usr/src目录，解压文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# cd &#x2F;usr&#x2F;src</span><br><span class="line">[root@localhost src]# ls</span><br><span class="line">debug  kernels  nginx-1.15.5.tar.gz</span><br><span class="line">[root@localhost src]# tar xf nginx-1.15.5.tar.gz </span><br><span class="line">[root@localhost src]# ls</span><br><span class="line">debug  kernels  nginx-1.15.5  nginx-1.15.5.tar.gz</span><br><span class="line">[root@localhost src]#</span><br></pre></td></tr></table></figure>

<p>查看配置方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# pwd</span><br><span class="line">&#x2F;usr&#x2F;src</span><br><span class="line">[root@localhost src]# cd nginx-1.15.5</span><br><span class="line">[root@localhost nginx-1.15.5]# ls</span><br><span class="line">auto     CHANGES.ru  configure  html     man     src</span><br><span class="line">CHANGES  conf        contrib    LICENSE  README</span><br><span class="line">[root@localhost nginx-1.15.5]# .&#x2F;configure --help  #查看配置参数帮助</span><br></pre></td></tr></table></figure>

<p>b、安装各种依赖环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# cd nginx-1.15.5</span><br><span class="line">[root@localhost nginx-1.15.5]# yum -y install gcc pcre-devel zlib zlib-devel</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.vpshosting.com.hk</span><br><span class="line"> * extras: centos.01link.hk</span><br><span class="line"> * updates: hk.mirrors.thegigabit.com</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package gcc.x86_64 0:4.8.5-39.el7 will be installed</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>gcc  编译工具  </p>
<p> pcre-devel  在nginx中url 需要用到这个包</p>
<p>zlib zlib-devel  解压缩工具</p>
<p>　对于 gcc，因为安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境的话，需要安装gcc。</p>
<p>　　对于 pcre，prce(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p>
<p>　　对于 zlib，zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p>
<p>c、指定目录进行编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.15.5]# .&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">checking for OS</span><br><span class="line"> + Linux 3.10.0-862.el7.x86_64 x86_64</span><br><span class="line">checking for C compiler ... found</span><br><span class="line"> + using GNU C compiler</span><br><span class="line"> + gcc version: 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>



<p>d、编译make</p>
<p>make就是将源码进行编译生成可执行程序的过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.15.5]# pwd</span><br><span class="line">&#x2F;usr&#x2F;src&#x2F;nginx-1.15.5</span><br><span class="line">[root@localhost nginx-1.15.5]# ls</span><br><span class="line">auto     CHANGES.ru  configure  html     Makefile  objs    src</span><br><span class="line">CHANGES  conf        contrib    LICENSE  man       README</span><br><span class="line">[root@localhost nginx-1.15.5]# make</span><br><span class="line">make -f objs&#x2F;Makefile</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;nginx-1.15.5&#39;</span><br><span class="line">cc -c -pipe  -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g  -I src&#x2F;core -I src&#x2F;event -I src&#x2F;event&#x2F;modules -I src&#x2F;os&#x2F;unix -I objs \</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>没有error的话进行</p>
<p>e、make install完成安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.15.5]# make install</span><br><span class="line">make -f objs&#x2F;Makefile install</span><br><span class="line">make[1]: Entering directory &#96;&#x2F;usr&#x2F;src&#x2F;nginx-1.15.5&#39;</span><br><span class="line">test -d &#39;&#x2F;usr&#x2F;local&#x2F;nginx&#39; || mkdir -p &#39;&#x2F;usr&#x2F;local&#x2F;nginx&#39;</span><br><span class="line">test -d &#39;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#39; \</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>完成安装</p>
<h2 id="二、nginx的相关目录"><a href="#二、nginx的相关目录" class="headerlink" title="二、nginx的相关目录"></a>二、nginx的相关目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx path prefix: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&quot;  #nginx的安装目录</span><br><span class="line">nginx binary file: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx&quot; #nginx的启动文件</span><br><span class="line">nginx modules path: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;modules&quot; # nginx的模块目录</span><br><span class="line">nginx configuration prefix: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&quot; #nginx的配置文件位置</span><br><span class="line">nginx configuration file: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf&quot; #nginx的配置文件全路径</span><br><span class="line">nginx pid file: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid&quot; #nginx的进程号</span><br><span class="line">nginx error log file: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log&quot; #nginx的错误日志目录</span><br><span class="line">nginx http access log file: &quot;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log&quot; #nginx的访问日志目录</span><br></pre></td></tr></table></figure>



<h2 id="三、nginx的启动与关闭、检查配置文件"><a href="#三、nginx的启动与关闭、检查配置文件" class="headerlink" title="三、nginx的启动与关闭、检查配置文件"></a>三、nginx的启动与关闭、检查配置文件</h2><p>查看端口是否占用</p>
<p>方法一</p>
<p>安装netstat 用netstat进行查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# yum -y install net-tools</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost nginx]# netstat -ntpl</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      881&#x2F;sshd            </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1128&#x2F;master         </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      881&#x2F;sshd            </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1128&#x2F;master</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<p>安装lsof 用lsof 查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# yum -y install lsof</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@localhost nginx]# lsof -i :80</span><br><span class="line">[root@localhost nginx]#   </span><br><span class="line">#没有显示结果表示端口没有被占用</span><br></pre></td></tr></table></figure>

<p>启动nginx方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# lsof -i :80</span><br><span class="line">[root@localhost nginx]# &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx  #启动nginx</span><br><span class="line">[root@localhost nginx]# lsof -i :80</span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">nginx   11728   root    6u  IPv4  38674      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   11729 nobody    6u  IPv4  38674      0t0  TCP *:http (LISTEN)</span><br><span class="line">[root@localhost nginx]# #nginx把80端口占用了</span><br></pre></td></tr></table></figure>





<p>查看是否安装成功</p>
<p>方法一：</p>
<p>用google浏览器地址栏输入<a href="http://192.168.199.228（nginx安装服务器的ip地址）" target="_blank" rel="noopener">http://192.168.199.228（nginx安装服务器的ip地址）</a></p>
<p>如果出现Welcome to nginx!页面则安装成功</p>
<p>方法二</p>
<p>用elinks 查看安装是否成功,elinks不会有缓存，一般的google浏览器会有缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx]# yum -y install elinks</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirror.vpshosting.com.hk</span><br><span class="line"> * extras: centos.01link.hk</span><br><span class="line"> * updates: hk.mirrors.thegigabit.com</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[root@localhost nginx]# elinks http:&#x2F;&#x2F;192.168.199.228 --dump</span><br><span class="line">                               Welcome to nginx!</span><br><span class="line"></span><br><span class="line">   If you see this page, the nginx web server is successfully installed and</span><br><span class="line">   working. Further configuration is required.</span><br><span class="line"></span><br><span class="line">   For online documentation and support please refer to [1]nginx.org.</span><br><span class="line">   Commercial support is available at [2]nginx.com.</span><br><span class="line"></span><br><span class="line">   Thank you for using nginx.</span><br><span class="line"></span><br><span class="line">References</span><br><span class="line"></span><br><span class="line">   Visible links</span><br><span class="line">   1. http:&#x2F;&#x2F;nginx.org&#x2F;</span><br><span class="line">   2. http:&#x2F;&#x2F;nginx.com&#x2F;</span><br><span class="line">[root@localhost nginx]#</span><br></pre></td></tr></table></figure>



<p><strong>关闭 nginx</strong></p>
<p>　　有3种方式：</p>
<p>　　方式1：快速停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">2 .&#x2F;nginx -s stop</span><br></pre></td></tr></table></figure>

<p>　　此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。不太友好。</p>
<p>　　方式2：平缓停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">2 .&#x2F;nginx -s quit</span><br></pre></td></tr></table></figure>

<p>　　此方式是指允许 nginx 服务将当前正在处理的网络请求处理完成，但不在接收新的请求，之后关闭连接，停止工作。</p>
<p>​    方法3：killall</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">killall nginx</span><br></pre></td></tr></table></figure>

<p>　　相当于直接杀死所有的关于nginx的进程</p>
<p><strong>重启 nginx</strong></p>
<p>　　方式1：先停止再启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 .&#x2F;nginx -s quit</span><br><span class="line">2 .&#x2F;nginx</span><br></pre></td></tr></table></figure>

<p>　　相当于先执行停止命令再执行启动命令。</p>
<p>　　方式2：重新加载配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 .&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>　　通常我们使用nginx修改最多的便是其配置文件 nginx.conf。修改之后想要让配置文件生效而不用重启 nginx，便可以使用此命令。</p>
<p>方法3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">killall -s HUP nginx</span><br></pre></td></tr></table></figure>

<p>　　<strong>检测配置文件语法是否正确</strong></p>
<p>　　方式1：通过如下命令，指定需要检查的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;nginx -t -c  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf&#96;</span><br></pre></td></tr></table></figure>

<p>　　方式2：通过如下命令，不加 -c 参数，默认检测nginx.conf 配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>



<h2 id="四、Nginx配置文件详解"><a href="#四、Nginx配置文件详解" class="headerlink" title="四、Nginx配置文件详解"></a>四、Nginx配置文件详解</h2><p>nginx文件结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p>
<p>2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p>
<p>3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</p>
<p>4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。</p>
<p>5、location块：配置请求的路由，以及各种页面的处理情况</p>
<p>　　该指令用于匹配 URL。</p>
<p>　　语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location [ &#x3D; | ~ | ~* | ^~] uri &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　（1）= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p>
<p>　　（2）~：用于表示 uri 包含正则表达式，并且区分大小写。</p>
<p>　　（3）~*：用于表示 uri 包含正则表达式，并且不区分大小写。</p>
<p>　　（4）^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p>
<p>　　注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。</p>
<h3 id="location匹配规则补充"><a href="#location匹配规则补充" class="headerlink" title="location匹配规则补充"></a>location匹配规则补充</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法规则： 【&#x3D; | ^~ | ~ | ~* | &#x2F; | &#x2F;uri 】</span><br><span class="line"> location &#x3D; &#x2F;uri                &#x3D; 表示精确匹配，只有完全匹配上才能生效，若找到，停止搜索； </span><br><span class="line"> location ^~ &#x2F;uri               ^~开头表示对URL路径进行前缀匹配，并且在正则匹配之前，若找到，停止搜索； </span><br><span class="line"> location ~ pattern             ~开头表示区分大小写的正则匹配，按配置文件顺序匹配； </span><br><span class="line"> location ~* pattern            ~*开头表示不区分大小写的正则匹配，按配置文件顺序匹配； </span><br><span class="line"> location &#x2F;uri                  不带任何修饰符，表示前缀匹配，在正则匹配之后； </span><br><span class="line"> location &#x2F;                     通用匹配，任何未匹配到其他location的请求都会匹配到，相当于default； </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">多个location配置的情况匹配顺序为</span><br><span class="line">首先精确匹配 &#x3D; ；</span><br><span class="line">其次前缀匹配 ^~；</span><br><span class="line">其次是按照配置文件中的正则匹配； </span><br><span class="line">然后匹配不带任何修饰符的前缀匹配； </span><br><span class="line">最后交给&#x2F;通用匹配；</span><br></pre></td></tr></table></figure>



<p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location支持的语法优先级：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location匹配顺序</span><br><span class="line"></span><br><span class="line">#  www.abc.com&#x2F;</span><br><span class="line">1.location &#x3D; &#x2F; &#123;</span><br><span class="line">  我是代码1</span><br><span class="line">&#125; 精确匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># www.abc.com&#x2F;images&#x2F;</span><br><span class="line">2.location ^~ &#x2F;images&#x2F; &#123;</span><br><span class="line">我是代码2</span><br><span class="line">&#125;  匹配常规串，不做正则检查</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#  www.abc.com&#x2F;xxx.gif  </span><br><span class="line">#www.abc.com&#x2F;xxx.jpg </span><br><span class="line">#www.abc.com&#x2F;xxx.gif</span><br><span class="line">#www.abc.com&#x2F;xxx.jpeg</span><br><span class="line"></span><br><span class="line">3.location ~* \.(gif|jpg|jpeg) &#123;</span><br><span class="line">我是代码3</span><br><span class="line">&#125; 正则匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#优先级为4，  www.abc.com&#x2F;doc&#x2F;xx资源</span><br><span class="line">4. location &#x2F;doc&#x2F; &#123;</span><br><span class="line">我是代码4</span><br><span class="line">&#125;  匹配常规字符，有正则优先正则</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如果你谁都没匹配到的话，默认走&#x2F;，走网页根目录，优先级最低</span><br><span class="line"></span><br><span class="line">5.location &#x2F; &#123;</span><br><span class="line">我是代码5</span><br><span class="line">&#125;  所有的location都不匹配后，默认匹配</span><br></pre></td></tr></table></figure>

<p>Nginx配置文件位置/usr/local/nginx/conf/nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi nginx.conf</span><br><span class="line"></span><br><span class="line">#启动该程序的默认用户</span><br><span class="line">#user  nobody;</span><br><span class="line">#一个主进程和多个工作进程。工作进程是单进程的，且不需要特殊授权即可运行；这里定义的是工作进程数量</span><br><span class="line">worker_processes  4;</span><br><span class="line"></span><br><span class="line">#全局错误日志的位置及日志格式</span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"> 	#每个工作进程最大的并发数,设置的工作进程数*每个进程允许的最多线程数就是最大并发数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">#http服务器设置</span><br><span class="line">http &#123;</span><br><span class="line">	 #设定mime类型，类型由mime.type文件定义</span><br><span class="line">    include       mime.types;</span><br><span class="line">    </span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">	#日志格式</span><br><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">    #$remote_user：用来记录客户端用户名称；</span><br><span class="line">    #$time_local： 用来记录访问时间与时区；</span><br><span class="line">    #$request： 用来记录请求的url与http协议；</span><br><span class="line">    #$status： 用来记录请求状态；成功是200，</span><br><span class="line">    #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">    #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">    #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	#全局访问日志路径</span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line">	</span><br><span class="line">	#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile        on;</span><br><span class="line">    </span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">	</span><br><span class="line">	#长连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">	</span><br><span class="line">	#开启压缩</span><br><span class="line">    #gzip  on;</span><br><span class="line">	</span><br><span class="line">	#配置虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">        #虚拟主机使用的端口</span><br><span class="line">        listen       80;</span><br><span class="line">        </span><br><span class="line">        #虚拟主机域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #虚拟主机支持的字符集</span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #虚拟主机的访问日志路径</span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #定义web根路径</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            #根目录路径</span><br><span class="line">            root   html;</span><br><span class="line">            #索引页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		#404页面配置</span><br><span class="line">        #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        #根据错误码 返回对应的页面</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        #定义页面路径</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		#定义反向代理服务器 数据服务器是lamp模型</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">		</span><br><span class="line">		#定义PHP为本机服务的模型  </span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line">        # concurs with nginx&#39;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ &#x2F;\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	#https的配置方案</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>详解二</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid &#x2F;nginx&#x2F;pid&#x2F;nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log&#x2F;error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|&#x2F;dev&#x2F;poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application&#x2F;octet-stream; #默认文件类型，默认为text&#x2F;plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#39;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#39;; #自定义格式</span><br><span class="line">    access_log log&#x2F;access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https:&#x2F;&#x2F;www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http:&#x2F;&#x2F;mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是nginx的基本配置，需要注意的有以下几点：</p>
<p>1、1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址； 2.$remote_user ：用来记录客户端用户名称； 3.$time_local ： 用来记录访问时间与时区；4.$request ： 用来记录请求的url与http协议；</p>
<p>  5.$status ： 用来记录请求状态；成功是200， 6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；7.$http_referer ：用来记录从那个页面链接访问过来的； 8.$http_user_agent ：记录客户端浏览器的相关信息；</p>
<p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p>
<p>3、每个指令必须有分号结束。</p>
<p>4、修改user 时要用useradd 添加用户，创建一个不能从终端登录的名字为webuser的系统用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# useradd -s &#x2F;sbin&#x2F;nologin -r webuser</span><br></pre></td></tr></table></figure>



<h2 id="五、nginx的默认网站"><a href="#五、nginx的默认网站" class="headerlink" title="五、nginx的默认网站"></a>五、nginx的默认网站</h2><p>当Nginx配置文件中有且只有一个Server的时候，该Server就被Nginx认为是默认网站，所有发给Nginx服务器器80端口的数据都会默认给该Server.</p>
<h3 id="默认网站设置"><a href="#默认网站设置" class="headerlink" title="默认网站设置"></a>默认网站设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">    # concurs with nginx&#39;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ &#x2F;\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nginx默认网站的访问控制"><a href="#nginx默认网站的访问控制" class="headerlink" title="nginx默认网站的访问控制"></a>nginx默认网站的访问控制</h3><p>创建环境，在html文件夹里创建abc三个文件分别写入index.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# ls</span><br><span class="line">50x.html  index.html</span><br><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# mkdir a b c</span><br><span class="line">[root@localhost html]# ls</span><br><span class="line">50x.html  a  b  c  index.html</span><br><span class="line">[root@localhost html]# echo aaa &gt;a&#x2F;index.html</span><br><span class="line">[root@localhost html]# echo bbb &gt;b&#x2F;index.html</span><br><span class="line">[root@localhost html]# echo ccc &gt;c&#x2F;index.html</span><br><span class="line">[root@localhost html]# ls a&#x2F;</span><br><span class="line">index.html</span><br><span class="line">[root@localhost html]# cat a&#x2F;index.html </span><br><span class="line">aaa</span><br><span class="line">[root@localhost html]# ls</span><br><span class="line">50x.html  a  b  c  index.html</span><br><span class="line">[root@localhost html]# elinks http:&#x2F;&#x2F;192.168.199.228&#x2F;a --dump  #本机访问测试</span><br><span class="line">   aaa</span><br></pre></td></tr></table></figure>

<h4 id="用例1-：ip控制"><a href="#用例1-：ip控制" class="headerlink" title="用例1 ：ip控制"></a><strong>用例1 ：ip控制</strong></h4><p><strong>针对a文件夹只允许本机访问，拒绝其他所有人访问</strong></p>
<p>设置修改nginx配置文件,本机ip192.168.199.228</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# vi ..&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">		listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;；</span><br><span class="line">        #location &#x2F; 这里的&#x2F;代表网站的根目录</span><br><span class="line">        </span><br><span class="line">		#针对a文件夹进行设置;</span><br><span class="line">        location &#x2F;a &#123;</span><br><span class="line">            allow   127.0.0.1;</span><br><span class="line">            allow   192.168.199.228;</span><br><span class="line">            deny   all;</span><br><span class="line">           	#return 404;</span><br><span class="line">		    #return http:&#x2F;&#x2F;www.jd.com;</span><br><span class="line">		    #可以返回指定错误页，也可以进行url跳转，注意这里的返回是访问成功和不成功的都返回</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>allow</code>和<code>deny</code>会按照顺序, 从上往下, 找到第一个匹配规则, 判断是否允许访问, 所以一般把<code>all</code>放最后。</p>
<p>其他例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deny  192.168.1.1;</span><br><span class="line">allow 192.168.1.0&#x2F;24;</span><br><span class="line">allow 10.1.1.0&#x2F;16;</span><br><span class="line">allow 2001:0db8::&#x2F;32;</span><br><span class="line">deny  all;</span><br></pre></td></tr></table></figure>



<p>测试修改后的配置文件是否有误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# ..&#x2F;sbin&#x2F;nginx -g ..&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">nginx: [emerg] unexpected end of parameter, expecting &quot;;&quot; in command line</span><br><span class="line">[root@localhost html]#</span><br></pre></td></tr></table></figure>

<p>修改完后方法一：修改完配置一定要检测Nginx配置是否正确，正确后再重新软加载配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# ..&#x2F;sbin&#x2F;nginx -t</span><br><span class="line">nginx: the configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful</span><br><span class="line">[root@localhost html]#  ..&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>修改完后方法二：不再直接kill后再重启，直接重新加载nginx的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# killall -s HUP nginx</span><br><span class="line">[root@localhost html]# elinks http:&#x2F;&#x2F;192.168.199.228&#x2F;a --dump</span><br><span class="line">   aaa</span><br></pre></td></tr></table></figure>



<h4 id="用例2：登录验证"><a href="#用例2：登录验证" class="headerlink" title="用例2：登录验证"></a><strong>用例2：登录验证</strong></h4><p>针对b文件夹，任何人都可以访问，但是需要凭用户密码进行验证</p>
<p>设置修改nginx配置文件,本机ip192.168.199.228</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# pwd</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class="line">[root@localhost html]# vi ..&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">...</span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">		listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;；</span><br><span class="line">        #location &#x2F; 这里的&#x2F;代表网站的根目录</span><br><span class="line">        </span><br><span class="line">		#针对a文件夹进行设置;</span><br><span class="line">        location &#x2F;a &#123;</span><br><span class="line">            allow   127.0.0.1;</span><br><span class="line">            allow   192.168.199.228;</span><br><span class="line">            deny   all;</span><br><span class="line">           	#return 404;</span><br><span class="line">		    #return http:&#x2F;&#x2F;www.jd.com;</span><br><span class="line">		    #可以返回指定错误页，也可以进行url跳转，注意这里的返回是访问成功和不成功的都返回</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #针对b文件夹进行设置;</span><br><span class="line">        location &#x2F;b &#123;</span><br><span class="line">            auth_basic ”登陆验证test&quot;;</span><br><span class="line">            auth_basic_user_file &#x2F;etc&#x2F;nginx&#x2F;htpasswd;</span><br><span class="line">            #auth_basic_user_file 用来存储用户认证信息的文件;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法讲解：<br>auth_basic 默认关闭，开启的话输入一段字符串即可。<br>auth_basic_user_file 该文件存储用户账号密码。</p>
<p>安装httpd-tools使用htpasswd工具生成认证信息文件放置在上面设置的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# yum -y install httpd-tools</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: hk.mirrors.thegigabit.com</span><br><span class="line"> * extras: hk.mirrors.thegigabit.com</span><br><span class="line"> * updates: hk.mirrors.thegigabit.com</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost html]# mkdir &#x2F;etc&#x2F;nginx</span><br><span class="line">[root@localhost html]# htpasswd -c &#x2F;etc&#x2F;nginx&#x2F;htpasswd user1 </span><br><span class="line">#创建文件htpasswd并将新用户user1和加密的密码写入文件到&#x2F;etc&#x2F;nginx&#x2F;目录下</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user user1  </span><br><span class="line">[root@localhost html]# htpasswd -m &#x2F;etc&#x2F;nginx&#x2F;htpasswd user2</span><br><span class="line">#如果htpasswd文件已经存在则使用-m参数添加新用户账户密码</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user user2</span><br><span class="line">[root@localhost html]# cat &#x2F;etc&#x2F;nginx&#x2F;htpasswd</span><br><span class="line">user1:$apr1$C8hzuJ.t$z8ZI&#x2F;y4HgrbrhnmC1QkTp&#x2F;</span><br><span class="line">user2:$apr1$5LB3P1Wj$HxyEELRZ3vDogTGM3xR2E.</span><br><span class="line">[root@localhost html]#</span><br></pre></td></tr></table></figure>

<p>重新加载配置文件验证效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost html]# killall -s HUP nginx</span><br><span class="line">[root@localhost html]#</span><br></pre></td></tr></table></figure>

<img src="/posts/20191216a1/nginx%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81.png" class="" title="登录验证">







<p>参考链接</p>
<p>[1]<a href="https://www.cnblogs.com/knowledgesea/p/5175711.html" target="_blank" rel="noopener">https://www.cnblogs.com/knowledgesea/p/5175711.html</a></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
